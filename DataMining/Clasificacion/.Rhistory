source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
c(1,2,3)+c(1,1,1)
y
source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
y
source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
source("C:/Users/migue/Desktop/Miguel3/Master/Intro/IntroR/prueba1.R", echo=TRUE)
?is.element
instal(arulesViz)
install.packages(arulesViz)
install.packages("arulesViz")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
m <- plot(rEclatFiltered, method = "matrix", measure="lift", engine = "htmlwidget")
library("arules")
itemset <- paste0("item", 1:10)
base::sample(itemset, size = 3, replace = FALSE)
table <- list(c("p","l","O","b"), c("p","l"), c("p","O","c"), c("p","l","O","c"))
transactions <- as(table, "transactions")
inspect(transactions)
itemFrequency(transactions, type = "a")
itemFrequency(transactions, type = "r")
itemFrequencyPlot(transactions, support = .5)
iApriori <- apriori(transactions, parameter = list(supp = 0, conf = 0, target = "frequent itemsets"))
inspect(iApriori)
# Ejecución del algoritmo 'eclat'
iEclat <- eclat(transactions, parameter = list(support = 0, maxlen = 5, tidLists = TRUE))
# Inspección del resultado
inspect(iEclat)
rEclat <- ruleInduction(iEclat, transactions, confidence = 0, control = list(method = "ptree", reduce = TRUE))
inspect(rEclat)
iEclat
str(iEclat)
image(iEclat@items, xlab = "Items", ylab = "Itemsets")
?apriori
rAprioriFiltered <- rApriori[!is.redundant(rApriori)]
rApriori <- apriori(transactions, parameter = list(supp = 0, conf = 0, target = "rules", minlen = 2))
rEclat <- ruleInduction(iEclat, transactions, confidence = 0, control = list(method = "ptree", reduce = TRUE))
rAprioriFiltered <- rApriori[!is.redundant(rApriori)]
rEclatFiltered <- rEclat[!is.redundant(rEclat)]
plot(rAprioriFiltered)
library("arulesViz")
plot(rAprioriFiltered)
inspect(rAprioriFiltered)
?apriori
plot(rEclatFiltered, engine = "htmlwidget")
plot(rEclatFiltered, engine = "htmlwidget")
m <- plot(rEclatFiltered, method = "matrix", measure="lift", engine = "htmlwidget")
htmlwidgets::saveWidget(m, 'demo.html', selfcontained = FALSE)
IRdisplay::display_html('<iframe src="demo.html"></iframe>')
library("IRdisplay")
plot(rAprioriFiltered, method = "matrix", measure="lift")
package.install(ISLR)
package.install("ISLR")
install.package("ISLR")
install.packages("ISLR")
install.packages(caret)
"caret"
install.packages("caret")
source("C:/Users/migue/Desktop/Miguel3/Master/DataMining/CrossValidation/CrossValidation.R", echo=TRUE)
data(Auto)
str(Auto)
Auto$weight <- Auto$weight * 0.453592
library(stats)
reg <- lm(weight~horsepower, data = europe)
weight
Auto$weight
length(Auto$weight)
str(Auto)
Auto
Auto$origin <- as.character(
factor(Auto$origin,
labels = c("American", "Japanese", "European")))
# muestra de test
america <- Auto[Auto$origin == "American", ]
# muestra de train
europe <- Auto[Auto$origin == "European", ]
# coches japoneses
japan <- Auto[Auto$origin == "Japanese", ]
l=length(Auto$weight)
trainWeight  <- europe$weight[1:l/2]
testWeight <- europe$weight[(l/2+1):l]
trainHorsepower  <- europe$horsepower[1:l/2]
testHorsepower <- europe$horsepower[(l/2+1):l]
abline(regTrain <- lm(trainWeight ~ trainHorsepower))
plot(europe$horsepower, europe$weight, pch = 16)
abline(regTrain <- lm(trainWeight ~ trainHorsepower))
# Functions
mae <- function(obs, est) {
mean(abs(obs - est))
}
rmse <- function(obs, est) {
sqrt(mean((obs - est)^2))
}
regTrain <- lm(trainWeight ~ trainHorsepower)
plot(europe$horsepower, europe$weight, pch = 16)
abline(regTrain)
length(regTrain)
regTrain
yestTrain <- predict(object = regTrain, newdata = data.frame(horsepower = trainHorsepower))
print('rmse en train')
print(rmse(testWeight, yestTrain))
yestTest <- predict(object = regTrain, newdata = data.frame(horsepower = testHorsepower))
print('rmse en test')
print(rmse(testWeight, yestTest))
yestTrain <- predict(object = regTrain, newdata = data.frame(horsepower = trainHorsepower))
print('rmse en train')
print(rmse(testWeight, yestTrain))
length(yestTrain)
length(testWeight)
yestTrain <- predict(object = regTrain, newdata = data.frame(horsepower = trainHorsepower))
print('rmse en train')
print(rmse(testWeight, yestTrain))
trainHorsepower  <- europe$horsepower[1:l/2,]
trainHorsepower  <- europe$horsepower[1:l/2]
?floor
l=length(Auto$weight)
limite=floor(l/2)
trainWeight  <- europe$weight[1:limite]
testWeight <- europe$weight[(limite+1):l]
trainHorsepower  <- europe$horsepower[1:limite]
testHorsepower <- europe$horsepower[(limite+1):l]
regTrain <- lm(trainWeight ~ trainHorsepower)
yestTrain <- predict(object = regTrain, newdata = data.frame(horsepower = trainHorsepower))
length(yestTrain)
length(trainWeight)
print('rmse en train')
print(rmse(testWeight, yestTrain))
yestTrain
data("cars")
summary(cars)
## convert continuous variable "Price" to categorical
cars$Price = as.factor(ifelse(cars$Price >= 22000, "E", "C"))
library(rpart)
# default parameters
t = rpart(formula = play ~ .,
data = tennis)
library("arules")
library("arulesViz")
itemset <- paste0("item", 1:10)
itemset
base::sample(itemset, size = 3, replace = FALSE)
base::sample(itemset, size = 3, replace = FALSE)
base::sample(itemset, size = 3, replace = FALSE)
table <- list(c("p","l","O","b"), c("p","l"), c("p","O","c"), c("p","l","O","c"))
transactions <- as(table, "transactions")
inspect(transactions)
transactions
str(transactions)
inspect(transactions)
itemFrequency(transactions, type = "a")
itemFrequency(transactions, type = "r")
iApriori <- apriori(transactions, parameter = list(supp = 0, conf = 0, target = "frequent itemsets"))
inspect(iApriori)
class(iApriori)
length(iApriori)
inspect(transactions)
?eclat
iEclat <- eclat(transactions, parameter = list(support = 0, maxlen = 5, tidLists = TRUE))
inspect(iEclat)
iEclat <- eclat(transactions, parameter = list(support = 0, conf=0, maxlen = 5, tidLists = TRUE))
iEclat <- eclat(transactions, parameter = list(support = 0, maxlen = 5, tidLists = TRUE))
inspect(iEclat)
library("htmlwidgets")
inspect(subset(iApriori, subset = items %in% c("b","l")))
inspect(subset(iApriori, subset = items %ain% c("b","l")))
?arules::match
?arules::match
library("arules")
library("arulesViz")
library("htmlwidgets")
itemset <- paste0("item", 1:10)
base::sample(itemset, size = 3, replace = FALSE)
table <- list(c("p","l","O","b"), c("p","l"), c("p","O","c"), c("p","l","O","c"))
transactions <- as(table, "transactions")
inspect(transactions)
itemFrequency( transactions, type = "a")
itemFrequency(transactions, type = "r")
itemFrequencyPlot(transactions, support = .5)
iApriori <- apriori(transactions, parameter = list(supp = 0, conf = 0, target = "frequent itemsets"))
inspect(iApriori)
iEclat <- eclat(transactions, parameter = list(support = 0, maxlen = 5, tidLists = TRUE))
inspect(iEclat)
inspect(subset(iApriori, subset = items %in% c("b","l")))
inspect(subset(iApriori, subset = items %ain% c("b","l")))
rEclat <- ruleInduction(iEclat, transactions, confidence = 0, control = list(method = "ptree", reduce = TRUE))
inspect(rEclat)
rApriori <- apriori(transactions, parameter = list(supp = 0, conf = 0, target = "rules", minlen = 1))
inspect(rApriori)
rEclat <- ruleInduction(iEclat, transactions, confidence = 0, control = list(method = "ptree", reduce = TRUE))
interestMeasure(rEclat, c("support", "chiSquare", "confidence", "conviction","cosine", "coverage", "leverage", "lift", "oddsRatio"), transactions)
is.redundant(rApriori)
class(is.redundant(rApriori))
type(is.redundant(rApriori))
class(rApriori)
class(rApriori)
rApriori
length(is.redundant(rApriori))
which(is.redundant(rApriori))
is.redundant(rApriori)
length(which(is.redundant(rApriori)))
a<-c(1,2,3)
indices <- c(T,F,F)
a[indices]
m <- plot(rEclatFiltered, method = "matrix", measure="lift", engine = "htmlwidget")
htmlwidgets::saveWidget(m, 'demo.html', selfcontained = FALSE)
IRdisplay::display_html('<iframe src="demo.html"></iframe>')
m <- plot(rEclatFiltered, method = "matrix", measure="lift", engine = "htmlwidget")
htmlwidgets::saveWidget(m, 'demo.html', selfcontained = FALSE))
m <- plot(rEclatFiltered, method = "matrix", measure="lift", engine = "htmlwidget")
1
m
str(iApriori)
inspect(iApriori)
inspect(transactions)
iApriori@items
inspect(iApriori@items)
iApriori
iApriori@items
image(iApriori@items, xlab = "Items", ylab = "Itemsets")
plot(rAprioriFiltered)
plot(rEclatFiltered, engine = "htmlwidget")
plot(rAprioriFiltered, method = "matrix", measure="lift")
plot(rAprioriFiltered, method="grouped", measure="lift")
plot(rAprioriFiltered, method="paracoord")
inspect(rApriori)
rApriori[1]
sample(rApriori,1)
rApriori[1]==sample(rApriori,1)
oneRule <- sample(rAprioriFiltered, 1)
inspect(oneRule)
plot(oneRule, method="doubledecker", data = transactions)
plot(rEclatFiltered, method = "graph")
data(Groceries)
data
inspect(data)
?data
data()
data(Groceries)
data(Groceries)
## read dataset
tennis = read.csv("tennis.csv")
setwd("C:/Users/migue/Desktop/Miguel3/Master/DataMining/ClassTree")
## read dataset
tennis = read.csv("tennis.csv")
library(tidyverse)
tennis = mutate_if(tennis, is.character,
as.factor)
## grow the tree
library(C50)
t = C5.0(formula = play ~ .,
data = tennis)
## plot the tree
plot(t)
summary(t)
#iris
p = C5.0(formula = Species ~ .,
data = iris)
plot(p)
summary(p)
## the total space is partitioned according to the
#thresholds determined by the tree
with(iris, plot(Petal.Length, Petal.Width, col = Species,
xlab = "Petal Length", ylab = "Petal Width"))
legend("topright", levels(iris$Species),
col = 1:length(levels(iris$Species)), pch = 1)
## tree package
library(tree)
# default parameters
t = tree(formula = play ~ ., data = tennis)
plot(t)
text(t, pretty = F)
# user-defined parameters
t = tree(formula = play ~ ., data = tennis,
minsize = 1)
plot(t)
text(t, pretty = F)
## rpart/rpart.plot packages
library(rpart)
# default parameters
t = rpart(formula = play ~ .,
data = tennis)
library(rpart.plot)
rpart.plot(t)
# user-defined parameters
t = rpart(formula = play ~ .,
data = tennis, minsplit = 2,
minbucket = 1)
rpart.plot(t)
data("cars")
summary(cars)
## convert continuous variable "Price" to categorical
cars$Price = as.factor(ifelse(cars$Price >= 22000, "E", "C"))
library(caret)
library(ISLR)
dataset = Carseats  # renombro el dataset por comodidad
high = ifelse(***)
dataset = Carseats  # renombro el dataset por comodidad
str(dataset)
dataset$Sales = as.factor(high)
high = ifelse(***)
dataset
?ifelse
high = ifelse(dataset$Sales >= 8, "Yes", "No")
dataset$Sales = as.factor(high)
str(dataset)
?table
?prune
acc.class = function(x, y) {
#x real values
#y predicted values
stopifnot(length(x)==length(y))
return sum(diag(table(x, y)))/length(x)
acc.class = function(x, y) {
#x real values
#y predicted values
stopifnot(length(x)==length(y))
sum(diag(table(x, y)))/length(x)
}
## independent train and test
n = nrow(dataset)
set.seed(25)
indtrain <- sample(1:n, round(0.75*n))
indtest <- setdiff(1:n, indtrain)
dataset.train = dataset[indtrain, ]
dataset.test = dataset[indtest, ]
?predict
?cv.tree
treeOld <-  tree(high~.,dataset.train)
treeOld <-  tree(high~.,dataset.train)
?tree
treeOld <-  tree(high~.,dataset)
high
treeOld <-  tree(high[indtrain]~.,dataset.train)
t = tree(high ~ .,dataset)
t.cv=cv.tree(t,K=10,method = 'misclass')
t = tree(high ~ .,dataset)
t.cv=cv.tree(t,K=10,method = 'misclass')
t = tree(high ~ .,dataset)
t.cv=cv.tree(t,K=10,method = 'misclass')
?cv.tree
t = tree(high ~ .,dataset)
t.cv=cv.tree(t,K=10,method = 'misclass')
treeOld <-  tree(high~.,dataset.train)
treeOld <-  tree(dataset.train$Sales~.,dataset.train)
nleaf = 3:10
acc.train = rep(NA, length(nleaf))
acc.test = rep(NA, length(nleaf))
for (n in nleaf) {
# pruning the default tree (based on parameter "best")
treeNew <- prune.tree(tree0, best = n)
# performance on training data
pred.train = predict(treeNew, dataset.train, type = "class")
acc.train[nleaf == n] = acc.class(pred.train, dataset.train$high)
# performance on test data
pred.test = predict(treeNew, dataset.test, type = "class")
acc.test[nleaf == n] = acc.class(pred.test, dataset.test$high)
}
for (n in nleaf) {
# pruning the default tree (based on parameter "best")
treeNew <- prune.tree(treeOld, best = n)
# performance on training data
pred.train = predict(treeNew, dataset.train, type = "class")
acc.train[nleaf == n] = acc.class(pred.train, dataset.train$high)
# performance on test data
pred.test = predict(treeNew, dataset.test, type = "class")
acc.test[nleaf == n] = acc.class(pred.test, dataset.test$high)
}
for (n in nleaf) {
# pruning the default tree (based on parameter "best")
treeNew <- prune.tree(treeOld, best = n)
# performance on training data
pred.train = predict(treeNew, dataset.train, type = "class")
acc.train[nleaf == n] = acc.class(pred.train, dataset.train$Sales)
# performance on test data
pred.test = predict(treeNew, dataset.test, type = "class")
acc.test[nleaf == n] = acc.class(pred.test, dataset.test$Sales)
}
source("~/.active-rstudio-document", echo=TRUE)
?ifelse
source("~/.active-rstudio-document", echo=TRUE)
class(dataset$Sales)
dataset$Sales
var1 = c("no", "no", "yes","yes")
var2 = c("no", "no", "no","yes")
table(var1, var2)
diag(table(var1, var2))
sum(diag(table(var1, var2)))
## evaluation function
acc.class = function(x, y) {
sum(diag(table(var1, var2)))/length(x)
}
source("~/.active-rstudio-document", echo=TRUE)
acc.class(c(1,2),c(1,3))
source("~/.active-rstudio-document", echo=TRUE)
acc.class(c(1,2),c(1,3))
table(c(1,2),c(1,3))
?table
a <- c(1,2)
b <- c(1,3)
a <- as.factor(a)
b <- as.factor(b)
table(a,b)
a
b
acc.class = function(x, y) {
stopifnot(length(x) == length(y))
sum(diag(table(x, y)))/length(x)
}
n = nrow(dataset)
set.seed(25)
idtrain = sample(1:n, round(n*0.75))
train = dataset[idtrain, ]
test = dataset[-idtrain, ]
?tree
source("~/.active-rstudio-document", echo=TRUE)
summary(traintree)
n
length(idtrain)
?prune.tree
